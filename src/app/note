ANGULAR

create project => ng new project_name / ng new project_name --routng
to run a angular project => ng server / ng serve --open
to create a component => ng g c component_name
to create a angular services => ng g s service_name
to create directive => ng g d directive_name




Angular bascs

1. modules-to mport lbrares - root module - AppModule
2. component to get (HTML   CSS    TS) 
3. data binding - data sharing between ts and HTML
 
  3.1 one way binding-data sharing only in one direction
  
  3.1.1 ts to HTML
  3.1.1.1 string interpolation - syntax: {{variable-name}}
  3.1.1.2 Property binding -syntax: [attribute-name]="Property-name"

  3.1.2 HTML to ts
  3.1.2.1 event binding - syntax:(event-name)="function-call"
  3.1.2.2 event binding usng $event - syntax:(event-name)="function-name($event)"

  3.1.2.3 Template referencing variable - syntax:#referencing-variable-name

  3.2 two way binding - data sharing n both direction

  3.2.1 binding usng ngModel -

        :-   > import FormsModule in AppModule
             > syntax :[(ngModel)]="variable-name"
               variable-name should defng in ts file
  4  ngSubmt-
    
        :-   > to submt the form syntax:(ngSubmt)="function-call()"

  5. set path for an html page - app.routng.module.ts    syntax:{path,component}

  6. dependency injection - to share between dependent classes 

  7. Angular services - for reuse data

  8. string to int = use "ParseInt(variable)"

     8.1 any to string = use JSON.stringify(variable)

  9. Angular Forms

    9.1 Template driven Forms - first design html

    9.2 Model driven Forms- first create Model in ts

    9.2.1 Reactive Forms - add Validation:Import ReactiveFormsModule

                         -form groups,form array,form control

  10.Angular Directives - To Manipulate DOM, 
    
    10.1 component Directives

    10.2 Structural Directives -To Chnage DOM structure

      10.2.1 ngIF - Syntax: *ngIf="condition"

      10.2.2 ngFor -Syntax:*ngFor=" let iterator of array-name"

   

  11. Local Storage - to permanently store data in browser

      11.1 setItem()

      11.2 getItem()

      11.3 removeItem()

  12. Anglar Pipes - to Covert the data Format
   
      Syntax:expression  | pipe opertor [ :pipe Arguments]

  13. Parent to Child Communication

      13.1 Parent to Child : using 'Input Decorator' 

      13.2 Child to Parent :Using 'Output Decorator'
  
  14. attribute Directives     

       14.1 Predefined - eg:ngClass
   
       14.2 Userdefined

  15. Event emitter - to generate userdefined events

      15.1 emit() - to occur the event